Construct the Hamiltonian operator...
Create basis...
l= 1
New partition occupations:
nImp,nVal,nCon = 6,0,0
l= 2
New partition occupations:
nImp,nVal,nCon = 8,10,0
New partition occupations:
nImp,nVal,nCon = 9,9,0
New partition occupations:
nImp,nVal,nCon = 10,8,0
#basis states = 190
Create Hamiltonian matrix...
Filling the Hamiltonian...
10% done
20% done
30% done
40% done
50% done
60% done
70% done
80% done
90% done
<#Hamiltonian elements/column> = 5
Diagonalize the Hamiltonian...
190 eigenstates found!
<E-E0> = 0.000
<N(3d)> = 8.135
<N(egDn)> = 1.078
<N(egUp)> = 1.077
<N(t2gDn)> = 2.990
<N(t2gUp)> = 2.990
<Lz(3d)> = -0.000
<Sz(3d)> = -0.000
<L^2(3d)> = 11.189
<S^2(3d)> = 1.830
E0 = -756.42
i  E-E0 N(3d) N(egDn) N(egUp) N(t2gDn) N(t2gUp) Lz(3d) Sz(3d) L^2(3d) S^2(3d) L^2(3d+B) S^2(3d+B)
0  0.00  8.14  1.998   0.157    2.992   2.988   -0.38  -0.92   11.19    1.83    12.00     2.00
1  0.00  8.14  1.078   1.078    2.990   2.990   -0.00  -0.00   11.19    1.83    12.00     2.00
2  0.00  8.14  0.157   1.998    2.988   2.992    0.38   0.92   11.19    1.83    12.00     2.00
3  0.83  8.10  1.541   1.541    2.509   2.508   -0.00  -0.00   11.39    1.86    11.98     1.98
4  0.83  8.10  1.541   1.541    2.508   2.508    0.00  -0.00   11.39    1.86    11.98     1.98
5  0.86  8.10  1.769   1.316    2.733   2.281    0.02  -0.45   11.41    1.88    12.00     2.00
6  0.86  8.10  1.542   1.543    2.507   2.507    0.00   0.00   11.41    1.88    12.00     2.00
7  0.86  8.10  1.316   1.769    2.281   2.733   -0.02   0.45   11.41    1.88    12.00     2.00
8  0.92  8.10  1.752   1.312    2.766   2.270   -0.11  -0.47   11.38    1.87    11.98     1.99
9  0.92  8.10  1.532   1.532    2.518   2.518    0.00  -0.00   11.38    1.87    11.98     1.99
Create spectra...
#polarization = 3
#relevant eigenstates = 3
#mesh points = 1000
Save spectra to disk...
Slater determinants and weights
Eigenstate 0
Number of Slater determinants: 190
Highest weights:
[ 0.51491661  0.34262533  0.03903008  0.03588135  0.0284873   0.0258506
  0.00324407  0.00259496]
Corresponding Slater determinantss:
[[ 0  1  2  3  4  5  6  7  8  9 10 12 13 14 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  8  9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 16 17 18 19 20 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 12 13 14 15 16 17 18 19 20 21 22 23 24]
 [ 0  1  2  3  4  5  6  7  8  9 10 12 13 14 15 16 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  8  9 10 11 12 13 14 15 16 17 18 19 20 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 13 14 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  8  9 10 11 13 14 15 16 17 18 19 20 21 22 23 24 25]]

Eigenstate 1
Number of Slater determinants: 190
Highest weights:
[ 0.22602162  0.22602149  0.19881382  0.19881378  0.01735396  0.01735391
  0.01665166  0.01665162]
Corresponding Slater determinantss:
[[ 0  1  2  3  4  5  6  7  8  9 11 12 13 14 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  7  8  9 10 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 12 13 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  8  9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 16 17 18 19 21 22 23 24 25]
 [ 0  1  2  3  4  5  7  8  9 10 11 12 13 14 15 16 17 18 19 20 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 12 13 14 15 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 11 12 13 14 15 16 17 18 19 20 21 22 23 24]]

Eigenstate 2
Number of Slater determinants: 190
Highest weights:
[ 0.5149161   0.34262516  0.03903015  0.03588141  0.02848735  0.02585065
  0.00324417  0.00259505]
Corresponding Slater determinantss:
[[ 0  1  2  3  4  5  7  8  9 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 11 12 13 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  7  8  9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 11 12 13 14 15 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8  9 11 12 13 14 15 16 17 18 19 20 21 22 23 25]
 [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 15 16 17 18 19 21 22 23 24 25]
 [ 0  1  2  3  4  5  7  8 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
 [ 0  1  2  3  4  5  6  7  8 10 11 12 13 15 16 17 18 19 20 21 22 23 24 25]]

Density matrix (in cubic basis):
Eigenstate 0
#element=100
Diagonal: (i,s)= (0, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (1, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (2, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (2, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (3, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (3, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (4, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (4, 1) , occupation = 0.99+0.00j

Eigenstate 1
#element=100
Diagonal: (i,s)= (0, 0) , occupation = 0.54+0.00j
Diagonal: (i,s)= (0, 1) , occupation = 0.54+0.00j
Diagonal: (i,s)= (1, 0) , occupation = 0.54+0.00j
Diagonal: (i,s)= (1, 1) , occupation = 0.54+0.00j
Diagonal: (i,s)= (2, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (2, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (3, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (3, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (4, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (4, 1) , occupation = 1.00+0.00j

Eigenstate 2
#element=100
Diagonal: (i,s)= (0, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (1, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (2, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (2, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (3, 0) , occupation = 1.00+0.00j
Diagonal: (i,s)= (3, 1) , occupation = 1.00+0.00j
Diagonal: (i,s)= (4, 0) , occupation = 0.99+0.00j
Diagonal: (i,s)= (4, 1) , occupation = 1.00+0.00j

Script finished.
         48181665 function calls (48169177 primitive calls) in 44.516 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001   44.516   44.516 <string>:1(<module>)
        1    0.003    0.003   44.515   44.515 hubbardU.py:1367(main)
      244    1.194    0.005   37.201    0.152 hubbardU.py:953(applyOp)
        1    0.002    0.002   34.965   34.965 hubbardU.py:1261(getSpectra)
        9    0.017    0.002   34.896    3.877 hubbardU.py:1305(getGreen)
   440848   17.237    0.000   21.872    0.000 hubbardU.py:42(c)
   440848   12.590    0.000   16.016    0.000 hubbardU.py:61(cd)
 18792504    6.077    0.000    6.077    0.000 {range}
        1    0.002    0.002    4.671    4.671 hubbardU.py:896(printExpValues)
       13    0.069    0.005    3.096    0.238 hubbardU.py:513(getEgT2gOccupation)
        1    0.003    0.003    2.414    2.414 hubbardU.py:1148(getHamiltonianMatrix)
   228148    2.307    0.000    2.379    0.000 hubbardU.py:30(addToFirst)
 25456543    1.667    0.000    1.667    0.000 {len}
        1    0.001    0.001    1.135    1.135 hubbardU.py:916(printThermalExpValues)
        1    0.034    0.034    0.781    0.781 hubbardU.py:984(getHamiltonianOperator)
   118560    0.362    0.000    0.771    0.000 hubbardU.py:289(i2c)
     2054    0.007    0.000    0.732    0.000 hubbardU.py:87(gauntC)
        1    0.000    0.000    0.699    0.699 hubbardU.py:224(get2p3dSlaterCondonUopp)
        6    0.003    0.000    0.698    0.116 hubbardU.py:174(getUopp)
     1606    0.002    0.000    0.695    0.000 hubbardU.py:95(getU)
     2054    0.022    0.000    0.655    0.000 wigner.py:548(gaunt)
  1119545    0.617    0.000    0.617    0.000 {method 'items' of 'dict' objects}
       10    0.000    0.000    0.556    0.056 hubbardU.py:395(getLsqr3dWithBath)
      974    0.009    0.000    0.475    0.000 evalf.py:1329(evalf)
11590/974    0.060    0.000    0.457    0.000 evalf.py:1274(evalf)
      944    0.031    0.000    0.451    0.000 evalf.py:517(evalf_mul)
       10    0.000    0.000    0.437    0.044 hubbardU.py:365(getSsqr3dWithBath)
     3595    0.430    0.000    0.435    0.000 hubbardU.py:16(inner)
       13    0.041    0.003    0.433    0.033 hubbardU.py:348(getSz3d)
       13    0.037    0.003    0.428    0.033 hubbardU.py:331(getLz3d)
    37958    0.197    0.000    0.354    0.000 hubbardU.py:265(c2i)
       13    0.000    0.000    0.325    0.025 hubbardU.py:410(getLsqr3d)
   156525    0.183    0.000    0.301    0.000 collections.py:117(keys)
        3    0.031    0.010    0.288    0.096 hubbardU.py:472(getDensityMatrixCubic)
       13    0.028    0.002    0.263    0.020 hubbardU.py:425(getTraceDensityMatrix)
       13    0.000    0.000    0.262    0.020 hubbardU.py:380(getSsqr3d)
       10    0.005    0.000    0.258    0.026 hubbardU.py:607(applyLz3dWithBath)
        3    0.005    0.002    0.255    0.085 hubbardU.py:441(getDensityMatrix)
       10    0.005    0.001    0.251    0.025 hubbardU.py:557(applySz3dWithBath)
3489/3369    0.014    0.000    0.215    0.000 assumptions.py:239(getit)
10181/9703    0.013    0.000    0.181    0.000 decorators.py:70(__sympifyit_wrapper)
     5609    0.101    0.000    0.169    0.000 facts.py:503(deduce_all_facts)
     2802    0.003    0.000    0.164    0.000 assumptions.py:223(copy)
     2802    0.007    0.000    0.160    0.000 assumptions.py:212(__init__)
   605604    0.151    0.000    0.151    0.000 collections.py:90(__iter__)
       13    0.003    0.000    0.150    0.012 hubbardU.py:585(applySz3d)
       13    0.003    0.000    0.149    0.011 hubbardU.py:635(applyLz3d)
       10    0.003    0.000    0.148    0.015 hubbardU.py:843(applyLminus3dWithBath)
       10    0.002    0.000    0.146    0.015 hubbardU.py:735(applyLplus3dWithBath)
     3420    0.012    0.000    0.139    0.000 evalf.py:631(evalf_pow)
6619/6614    0.007    0.000    0.106    0.000 decorators.py:108(binary_op_wrapper)
    45245    0.061    0.000    0.093    0.000 collections.py:125(items)
        1    0.005    0.005    0.093    0.093 npyio.py:969(savetxt)
       10    0.001    0.000    0.092    0.009 hubbardU.py:788(applySminus3dWithBath)
       10    0.001    0.000    0.091    0.009 hubbardU.py:680(applySplus3dWithBath)
       13    0.002    0.000    0.088    0.007 hubbardU.py:765(applyLplus3d)
        1    0.086    0.086    0.086    0.086 {open}
       13    0.002    0.000    0.084    0.006 hubbardU.py:873(applyLminus3d)
     2639    0.083    0.000    0.083    0.000 {math.sqrt}
  327/261    0.003    0.000    0.060    0.000 operations.py:27(__new__)
        1    0.058    0.058    0.058    0.058 linalg.py:1141(eigh)
       13    0.001    0.000    0.055    0.004 hubbardU.py:711(applySplus3d)
  217/195    0.009    0.000    0.055    0.000 mul.py:95(flatten)
    10943    0.021    0.000    0.054    0.000 sympify.py:53(sympify)
       13    0.001    0.000    0.054    0.004 hubbardU.py:819(applySminus3d)
      190    0.051    0.000    0.051    0.000 hubbardU.py:1465(<dictcomp>)
     1912    0.008    0.000    0.048    0.000 expr.py:143(__rmul__)
     3420    0.011    0.000    0.046    0.000 libmpf.py:1338(mpf_sqrt)
      944    0.002    0.000    0.042    0.000 miscellaneous.py:50(sqrt)
        3    0.001    0.000    0.041    0.014 hubbardU.py:1112(getDipoleOperator)
     1888    0.003    0.000    0.039    0.000 libelefun.py:318(mpf_pow)
   154/31    0.001    0.000    0.039    0.001 power.py:164(__new__)
       31    0.000    0.000    0.038    0.001 mul.py:619(_eval_power)
2904/2837    0.008    0.000    0.038    0.000 assumptions.py:251(_ask)
       81    0.037    0.000    0.037    0.000 hubbardU.py:1234(add)
26676/26646    0.009    0.000    0.037    0.000 {all}
       30    0.001    0.000    0.036    0.001 power.py:673(_eval_expand_power_base)
    77108    0.026    0.000    0.032    0.000 facts.py:537(<genexpr>)
     2863    0.006    0.000    0.030    0.000 expr.py:138(__mul__)
     3645    0.004    0.000    0.029    0.000 evalf.py:1235(<lambda>)
     5536    0.013    0.000    0.028    0.000 libmpf.py:924(mpf_div)
     4672    0.002    0.000    0.026    0.000 hubbardU.py:1108(<genexpr>)
     5985    0.010    0.000    0.025    0.000 libmpf.py:291(from_man_exp)
     3648    0.005    0.000    0.025    0.000 libmpf.py:465(from_rational)
    13481    0.023    0.000    0.023    0.000 libmpf.py:153(_normalize)
    39162    0.021    0.000    0.021    0.000 facts.py:486(_tell)
     3720    0.006    0.000    0.020    0.000 numbers.py:844(_new)
      183    0.001    0.000    0.020    0.000 hubbardU.py:1251(norm2)
       10    0.020    0.002    0.020    0.002 {numpy.core.multiarray.dot}
      183    0.005    0.000    0.019    0.000 {sum}
      946    0.006    0.000    0.019    0.000 numbers.py:739(__new__)
     3484    0.004    0.000    0.018    0.000 libintmath.py:271(sqrtrem_python)
    55/31    0.001    0.000    0.018    0.001 numbers.py:1891(_eval_power)
     3598    0.006    0.000    0.016    0.000 evalf.py:112(pure_complex)
    10731    0.006    0.000    0.015    0.000 libintmath.py:83(python_bitcount)
    40575    0.015    0.000    0.015    0.000 {isinstance}
     1829    0.004    0.000    0.015    0.000 numbers.py:1024(__eq__)
      944    0.004    0.000    0.014    0.000 expr.py:163(__rdiv__)
       36    0.014    0.000    0.014    0.000 hubbardU.py:1345(<dictcomp>)
     9406    0.007    0.000    0.014    0.000 numbers.py:526(__hash__)
    25857    0.012    0.000    0.014    0.000 hubbardU.py:1259(<genexpr>)
     3484    0.014    0.000    0.014    0.000 libintmath.py:197(isqrt_small_python)
     1888    0.002    0.000    0.014    0.000 evalf.py:1240(<lambda>)
     9329    0.009    0.000    0.013    0.000 numbers.py:1718(__new__)
     3870    0.004    0.000    0.012    0.000 numbers.py:1112(__hash__)
     1888    0.004    0.000    0.012    0.000 libelefun.py:114(f)
     3055    0.002    0.000    0.012    0.000 sympify.py:329(_sympify)
     4664    0.003    0.000    0.012    0.000 numbers.py:74(mpf_norm)
     5271    0.005    0.000    0.011    0.000 numbers.py:1581(__hash__)
     2945    0.007    0.000    0.011    0.000 numbers.py:1398(__div__)
17202/16869    0.009    0.000    0.010    0.000 basic.py:102(__hash__)
    85461    0.010    0.000    0.010    0.000 {method 'get' of 'dict' objects}
    10760    0.010    0.000    0.010    0.000 {_bisect.bisect}
     12/6    0.000    0.000    0.010    0.002 numeric.py:1835(array_str)
     12/6    0.001    0.000    0.010    0.002 arrayprint.py:340(array2string)
    16900    0.010    0.000    0.010    0.000 {hasattr}
     8915    0.004    0.000    0.010    0.000 libmpf.py:330(from_int)
     1532    0.001    0.000    0.009    0.000 libintmath.py:291(isqrt_python)
        6    0.000    0.000    0.009    0.001 arrayprint.py:237(_array2string)
     5991    0.006    0.000    0.009    0.000 basic.py:77(__new__)
     1061    0.003    0.000    0.009    0.000 mul.py:703(as_coeff_Mul)
       30    0.000    0.000    0.008    0.000 iterables.py:622(sift)
       60    0.000    0.000    0.008    0.000 power.py:707(pred)
     3435    0.003    0.000    0.008    0.000 libmpf.py:600(mpf_lt)
     5628    0.008    0.000    0.008    0.000 libmpf.py:208(_normalize1)
      946    0.002    0.000    0.007    0.000 libmpf.py:410(from_float)
     1545    0.001    0.000    0.007    0.000 evalf.py:1236(<lambda>)
      944    0.001    0.000    0.007    0.000 numbers.py:405(__float__)
      383    0.001    0.000    0.006    0.000 numbers.py:1389(__mul__)
       50    0.000    0.000    0.006    0.000 function.py:362(__new__)
       15    0.000    0.000    0.005    0.000 expr.py:719(_eval_is_negative)
  459/412    0.001    0.000    0.005    0.000 numbers.py:1808(__mul__)
    37852    0.005    0.000    0.005    0.000 {abs}
    88/45    0.001    0.000    0.005    0.000 factor_.py:264(perfect_power)
       17    0.005    0.000    0.005    0.000 unitarytransform.py:176(get_spherical_2_cubic_matrix)
     1920    0.003    0.000    0.005    0.000 libmpf.py:64(dps_to_prec)
      894    0.002    0.000    0.005    0.000 expr.py:123(__radd__)
      836    0.001    0.000    0.005    0.000 operations.py:63(_new_rawargs)
     3435    0.003    0.000    0.005    0.000 libmpf.py:548(mpf_cmp)
       18    0.000    0.000    0.005    0.000 arrayprint.py:529(__init__)
       18    0.002    0.000    0.005    0.000 arrayprint.py:543(fillFormat)
  207/127    0.001    0.000    0.004    0.000 numbers.py:1227(__new__)
     1054    0.002    0.000    0.004    0.000 operations.py:49(_from_args)
     9322    0.004    0.000    0.004    0.000 {max}
      944    0.001    0.000    0.004    0.000 numbers.py:879(_as_mpf_val)
       15    0.000    0.000    0.004    0.000 expr.py:1638(as_real_imag)
      434    0.002    0.000    0.004    0.000 mul.py:375(_gather)
     6350    0.003    0.000    0.004    0.000 numbers.py:1880(__hash__)
       94    0.001    0.000    0.004    0.000 generate.py:360(primerange)
     5997    0.004    0.000    0.004    0.000 {method 'update' of 'set' objects}
    11652    0.003    0.000    0.003    0.000 basic.py:610(func)
     30/6    0.001    0.000    0.003    0.001 arrayprint.py:458(_formatArray)
      427    0.001    0.000    0.003    0.000 {map}
      217    0.000    0.000    0.003    0.000 mul.py:30(_mulsort)
     2767    0.002    0.000    0.003    0.000 assumptions.py:226(generator)
      217    0.001    0.000    0.003    0.000 {method 'sort' of 'list' objects}
       50    0.000    0.000    0.003    0.000 function.py:140(nargs)
      948    0.001    0.000    0.002    0.000 evalf.py:34(bitcount)
       11    0.001    0.000    0.002    0.000 quantyt.py:621(thermal_average)
       50    0.001    0.000    0.002    0.000 sets.py:1764(__new__)
     1310    0.002    0.000    0.002    0.000 numbers.py:3107(__hash__)
        6    0.000    0.000    0.002    0.000 arrayprint.py:696(__init__)
8612/8441    0.002    0.000    0.002    0.000 {hash}
     2654    0.002    0.000    0.002    0.000 numbers.py:893(_eval_is_infinite)
     5991    0.002    0.000    0.002    0.000 {built-in method __new__ of type object at 0x2b2553b7e4c0}
     3773    0.002    0.000    0.002    0.000 {divmod}
      944    0.001    0.000    0.002    0.000 libmpf.py:429(to_float)
     1286    0.002    0.000    0.002    0.000 collections.py:71(__setitem__)
     1152    0.002    0.000    0.002    0.000 arrayprint.py:628(_digits)
       93    0.000    0.000    0.002    0.000 functools.py:86(__lt__)
       78    0.002    0.000    0.002    0.000 {method 'format' of 'str' objects}
     3043    0.002    0.000    0.002    0.000 numbers.py:1834(__eq__)
   186/93    0.001    0.000    0.002    0.000 basic.py:151(compare)
      341    0.001    0.000    0.002    0.000 numbers.py:142(igcd)
     4616    0.002    0.000    0.002    0.000 {min}
     7269    0.002    0.000    0.002    0.000 basic.py:636(args)
       89    0.002    0.000    0.002    0.000 {numpy.core.multiarray.zeros}
     1888    0.002    0.000    0.002    0.000 libelefun.py:94(g)
       50    0.000    0.000    0.002    0.000 sets.py:507(__contains__)
       62    0.000    0.000    0.002    0.000 generate.py:109(primerange)
      155    0.001    0.000    0.002    0.000 basic.py:278(__eq__)
       50    0.001    0.000    0.001    0.000 {numpy.core.multiarray.array}
      944    0.001    0.000    0.001    0.000 wigner.py:45(_calc_factlist)
      100    0.001    0.000    0.001    0.000 compatibility.py:591(ordered)
       50    0.000    0.000    0.001    0.000 sets.py:266(contains)
       92    0.000    0.000    0.001    0.000 numbers.py:940(__mul__)
     3435    0.001    0.000    0.001    0.000 libmpf.py:666(mpf_sign)
       43    0.000    0.000    0.001    0.000 numbers.py:1584(factors)
        1    0.001    0.001    0.001    0.001 {method 'close' of 'file' objects}
     2853    0.001    0.000    0.001    0.000 {method 'copy' of 'dict' objects}
       66    0.001    0.000    0.001    0.000 {method 'reduce' of 'numpy.ufunc' objects}
      120    0.000    0.000    0.001    0.000 numbers.py:1815(__rmul__)
     1888    0.001    0.000    0.001    0.000 evalf.py:79(fastlog)
       43    0.000    0.000    0.001    0.000 factor_.py:1174(factorrat)
      944    0.001    0.000    0.001    0.000 {math.ldexp}
     2654    0.001    0.000    0.001    0.000 expr.py:2833(as_coeff_Add)
     1814    0.001    0.000    0.001    0.000 libmpf.py:511(mpf_eq)
        4    0.001    0.000    0.001    0.000 hubbardU.py:208(addOpps)
      546    0.000    0.000    0.001    0.000 {method 'setdefault' of 'dict' objects}
      129    0.001    0.000    0.001    0.000 factor_.py:805(factorint)
     1920    0.001    0.000    0.001    0.000 {round}
        1    0.000    0.000    0.001    0.001 hubbardU.py:1166(getBasis)
       50    0.000    0.000    0.001    0.000 sets.py:1863(_contains)
       30    0.000    0.000    0.001    0.000 numbers.py:454(__mul__)
      576    0.001    0.000    0.001    0.000 arrayprint.py:648(__call__)
       50    0.000    0.000    0.001    0.000 function.py:194(__new__)
      600    0.001    0.000    0.001    0.000 arrayprint.py:450(_extendLine)
       43    0.000    0.000    0.001    0.000 factor_.py:1226(primefactors)
      372    0.000    0.000    0.001    0.000 core.py:73(__cmp__)
      2/1    0.000    0.000    0.001    0.001 numbers.py:1429(_eval_power)
      6/3    0.000    0.000    0.001    0.000 expr.py:148(__pow__)
      120    0.000    0.000    0.001    0.000 numbers.py:3041(__ne__)
      946    0.001    0.000    0.001    0.000 {math.frexp}
        1    0.000    0.000    0.001    0.001 fromnumeric.py:1490(nonzero)
       24    0.000    0.000    0.001    0.000 arrayprint.py:594(__call__)
       50    0.000    0.000    0.001    0.000 relational.py:286(__new__)
      120    0.000    0.000    0.001    0.000 numbers.py:3029(__eq__)
        1    0.001    0.001    0.001    0.001 {method 'nonzero' of 'numpy.ndarray' objects}
       15    0.000    0.000    0.001    0.000 numbers.py:1084(__lt__)
     1905    0.001    0.000    0.001    0.000 numbers.py:864(_hashable_content)
       11    0.000    0.000    0.001    0.000 fromnumeric.py:2300(amin)
       14    0.000    0.000    0.001    0.000 numeric.py:414(asarray)
     2427    0.001    0.000    0.001    0.000 {method 'rstrip' of 'str' objects}
     2968    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
       11    0.000    0.000    0.000    0.000 numeric.py:86(zeros_like)
       33    0.000    0.000    0.000    0.000 power.py:364(_eval_is_zero)
       80    0.000    0.000    0.000    0.000 abc.py:128(__instancecheck__)
      186    0.000    0.000    0.000    0.000 core.py:96(__lt__)
      250    0.000    0.000    0.000    0.000 numbers.py:2549(__hash__)
      398    0.000    0.000    0.000    0.000 power.py:602(as_base_exp)
     1732    0.000    0.000    0.000    0.000 expr.py:2829(as_coeff_Mul)
       84    0.000    0.000    0.000    0.000 numeric.py:2576(seterr)
      186    0.000    0.000    0.000    0.000 core.py:101(__gt__)
        2    0.000    0.000    0.000    0.000 mul.py:1036(_eval_is_zero)
      935    0.000    0.000    0.000    0.000 compatibility.py:377(as_int)
       11    0.000    0.000    0.000    0.000 _methods.py:28(_amin)
       99    0.000    0.000    0.000    0.000 power.py:20(integer_nthroot)
       74    0.000    0.000    0.000    0.000 numbers.py:1711(_as_mpf_val)
     1001    0.000    0.000    0.000    0.000 {method 'write' of 'file' objects}
        6    0.000    0.000    0.000    0.000 arrayprint.py:635(__init__)
      183    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}
       62    0.000    0.000    0.000    0.000 random.py:277(shuffle)
       56    0.000    0.000    0.000    0.000 primetest.py:175(isprime)
     1405    0.000    0.000    0.000    0.000 {method 'pop' of 'dict' objects}
      112    0.000    0.000    0.000    0.000 numbers.py:1371(__add__)
       47    0.000    0.000    0.000    0.000 numbers.py:401(_as_mpf_op)
        1    0.000    0.000    0.000    0.000 fromnumeric.py:1743(sum)
       92    0.000    0.000    0.000    0.000 libmpf.py:858(python_mpf_mul)
      283    0.000    0.000    0.000    0.000 {sorted}
       42    0.000    0.000    0.000    0.000 numeric.py:2967(__enter__)
      944    0.000    0.000    0.000    0.000 numbers.py:552(as_coeff_Add)
       40    0.000    0.000    0.000    0.000 numbers.py:1488(__eq__)
     1176    0.000    0.000    0.000    0.000 numbers.py:2229(__nonzero__)
        1    0.000    0.000    0.000    0.000 _methods.py:31(_sum)
       18    0.000    0.000    0.000    0.000 fromnumeric.py:1900(any)
        7    0.000    0.000    0.000    0.000 numbers.py:2005(_eval_is_composite)
       15    0.000    0.000    0.000    0.000 numbers.py:398(_eval_evalf)
       21    0.000    0.000    0.000    0.000 fromnumeric.py:1574(shape)
      108    0.000    0.000    0.000    0.000 {zip}
       13    0.000    0.000    0.000    0.000 collections.py:50(__init__)
       66    0.000    0.000    0.000    0.000 numbers.py:1791(__radd__)
       42    0.000    0.000    0.000    0.000 numeric.py:2972(__exit__)
    63/33    0.000    0.000    0.000    0.000 expr.py:322(is_number)
      173    0.000    0.000    0.000    0.000 _weakrefset.py:70(__contains__)
       29    0.000    0.000    0.000    0.000 generate.py:138(search)
       13    0.000    0.000    0.000    0.000 numbers.py:2000(_eval_is_prime)
       61    0.000    0.000    0.000    0.000 expr.py:1021(args_cnc)
       18    0.000    0.000    0.000    0.000 {method 'any' of 'numpy.ndarray' objects}
       40    0.000    0.000    0.000    0.000 factor_.py:704(_factorint_small)
      856    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
       11    0.000    0.000    0.000    0.000 {numpy.core.multiarray.copyto}
       50    0.000    0.000    0.000    0.000 sets.py:49(_infimum_key)
    39/35    0.000    0.000    0.000    0.000 factor_.py:193(multiplicity)
        5    0.000    0.000    0.000    0.000 index_tricks.py:665(fill_diagonal)
        1    0.000    0.000    0.000    0.000 power.py:232(_eval_power)
       18    0.000    0.000    0.000    0.000 _methods.py:37(_any)
       84    0.000    0.000    0.000    0.000 numeric.py:2676(geterr)
        1    0.000    0.000    0.000    0.000 power.py:535(_eval_is_polar)
      372    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
       14    0.000    0.000    0.000    0.000 abc.py:148(__subclasscheck__)
       11    0.000    0.000    0.000    0.000 {numpy.core.multiarray.empty_like}
      580    0.000    0.000    0.000    0.000 basic.py:111(_hashable_content)
      115    0.000    0.000    0.000    0.000 operations.py:347(make_args)
        1    0.000    0.000    0.000    0.000 function_base.py:9(linspace)
        3    0.000    0.000    0.000    0.000 fromnumeric.py:828(argsort)
   189/99    0.000    0.000    0.000    0.000 expr.py:346(<genexpr>)
      265    0.000    0.000    0.000    0.000 functools.py:84(__init__)
      216    0.000    0.000    0.000    0.000 {method 'insert' of 'list' objects}
        1    0.000    0.000    0.000    0.000 type_check.py:237(iscomplexobj)
       18    0.000    0.000    0.000    0.000 {method 'compress' of 'numpy.ndarray' objects}
        3    0.000    0.000    0.000    0.000 {method 'argsort' of 'numpy.ndarray' objects}
       14    0.000    0.000    0.000    0.000 {method 'conjugate' of 'numpy.generic' objects}
       46    0.000    0.000    0.000    0.000 generate.py:253(nextprime)
        3    0.000    0.000    0.000    0.000 {method 'astype' of 'numpy.ndarray' objects}
       88    0.000    0.000    0.000    0.000 {math.log}
        7    0.000    0.000    0.000    0.000 numbers.py:1844(__gt__)
        1    0.000    0.000    0.000    0.000 libelefun.py:233(pi_fixed)
       20    0.000    0.000    0.000    0.000 integers.py:20(eval)
       71    0.000    0.000    0.000    0.000 factor_.py:155(trailing)
       84    0.000    0.000    0.000    0.000 {numpy.core.umath.seterrobj}
       25    0.000    0.000    0.000    0.000 {issubclass}
      150    0.000    0.000    0.000    0.000 numbers.py:546(as_coeff_Mul)
        1    0.000    0.000    0.000    0.000 {numpy.core.multiarray.arange}
      7/1    0.000    0.000    0.000    0.000 libelefun.py:211(bs_chudnovsky)
      100    0.000    0.000    0.000    0.000 boolalg.py:193(__hash__)
       42    0.000    0.000    0.000    0.000 numeric.py:2963(__init__)
       60    0.000    0.000    0.000    0.000 logic.py:89(fuzzy_bool)
       45    0.000    0.000    0.000    0.000 numbers.py:885(_as_mpf_op)
        3    0.000    0.000    0.000    0.000 numbers.py:1471(_as_mpf_val)
      175    0.000    0.000    0.000    0.000 numbers.py:1748(__int__)
      180    0.000    0.000    0.000    0.000 numbers.py:2916(__eq__)
        6    0.000    0.000    0.000    0.000 fromnumeric.py:1383(ravel)
      278    0.000    0.000    0.000    0.000 {method 'random' of '_random.Random' objects}
        1    0.000    0.000    0.000    0.000 power.py:521(_eval_is_prime)
       15    0.000    0.000    0.000    0.000 numbers.py:2913(__hash__)
      168    0.000    0.000    0.000    0.000 {numpy.core.umath.geterrobj}
       27    0.000    0.000    0.000    0.000 numeric.py:484(asanyarray)
        1    0.000    0.000    0.000    0.000 linalg.py:139(_commonType)
        1    0.000    0.000    0.000    0.000 {method 'count' of 'str' objects}
      129    0.000    0.000    0.000    0.000 evalf.py:1239(<lambda>)
        1    0.000    0.000    0.000    0.000 hubbardU.py:1152(<dictcomp>)
       71    0.000    0.000    0.000    0.000 numbers.py:1359(_hashable_content)
      106    0.000    0.000    0.000    0.000 power.py:211(base)
        1    0.000    0.000    0.000    0.000 linalg.py:101(get_linalg_error_extobj)
      102    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
        2    0.000    0.000    0.000    0.000 power.py:505(_eval_is_finite)
        2    0.000    0.000    0.000    0.000 hubbardU.py:248(getSOCopp)
       13    0.000    0.000    0.000    0.000 _abcoll.py:548(update)
        1    0.000    0.000    0.000    0.000 {numpy.core.multiarray.result_type}
        1    0.000    0.000    0.000    0.000 basic.py:1498(doit)
       50    0.000    0.000    0.000    0.000 {method 'pop' of 'list' objects}
       29    0.000    0.000    0.000    0.000 generate.py:47(extend)
        6    0.000    0.000    0.000    0.000 {method 'item' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 _weakrefset.py:58(__iter__)
       45    0.000    0.000    0.000    0.000 numbers.py:915(_eval_is_zero)
        6    0.000    0.000    0.000    0.000 {method 'ravel' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 power.py:399(_eval_is_real)
        1    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}
       49    0.000    0.000    0.000    0.000 numbers.py:1365(_eval_is_zero)
        6    0.000    0.000    0.000    0.000 arrayprint.py:685(__init__)
       72    0.000    0.000    0.000    0.000 power.py:215(exp)
        3    0.000    0.000    0.000    0.000 type_check.py:141(imag)
        2    0.000    0.000    0.000    0.000 function.py:62(_coeff_isneg)
       83    0.000    0.000    0.000    0.000 {getattr}
        1    0.000    0.000    0.000    0.000 {method '__array_prepare__' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.000    0.000 linalg.py:198(_assertRankAtLeast2)
        1    0.000    0.000    0.000    0.000 linalg.py:209(_assertNdSquareness)
        1    0.000    0.000    0.000    0.000 linalg.py:106(_makearray)
       24    0.000    0.000    0.000    0.000 boolalg.py:273(<lambda>)
       40    0.000    0.000    0.000    0.000 factor_.py:718(done)
        1    0.000    0.000    0.000    0.000 numbers.py:1853(__lt__)
       15    0.000    0.000    0.000    0.000 complexes.py:144(eval)
        1    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}
        1    0.000    0.000    0.000    0.000 libintmath.py:223(isqrt_fast_python)
       15    0.000    0.000    0.000    0.000 sympify.py:13(__init__)
        1    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
        1    0.000    0.000    0.000    0.000 power.py:1009(_eval_is_rational)
       15    0.000    0.000    0.000    0.000 complexes.py:52(eval)
        1    0.000    0.000    0.000    0.000 {method 'upper' of 'str' objects}
        6    0.000    0.000    0.000    0.000 arrayprint.py:713(__init__)
       18    0.000    0.000    0.000    0.000 arrayprint.py:657(__init__)
        2    0.000    0.000    0.000    0.000 linalg.py:124(_realType)
        1    0.000    0.000    0.000    0.000 _weakrefset.py:26(__exit__)
        6    0.000    0.000    0.000    0.000 {_functools.reduce}
       16    0.000    0.000    0.000    0.000 {method 'iteritems' of 'dict' objects}
       58    0.000    0.000    0.000    0.000 boolalg.py:188(__nonzero__)
        1    0.000    0.000    0.000    0.000 power.py:454(_eval_is_complex)
       28    0.000    0.000    0.000    0.000 {pow}
       15    0.000    0.000    0.000    0.000 evalf.py:1237(<lambda>)
        2    0.000    0.000    0.000    0.000 numbers.py:1368(__neg__)
       14    0.000    0.000    0.000    0.000 numbers.py:1362(_eval_is_positive)
       15    0.000    0.000    0.000    0.000 numbers.py:2906(_as_mpf_val)
        6    0.000    0.000    0.000    0.000 arrayprint.py:734(__init__)
        1    0.000    0.000    0.000    0.000 rsptt.py:890(dc_MLFT)
        2    0.000    0.000    0.000    0.000 linalg.py:111(isComplexType)
        1    0.000    0.000    0.000    0.000 _weakrefset.py:36(__init__)
        1    0.000    0.000    0.000    0.000 _weakrefset.py:20(__enter__)
        1    0.000    0.000    0.000    0.000 _weakrefset.py:52(_commit_removals)
        8    0.000    0.000    0.000    0.000 logic.py:148(fuzzy_not)
        4    0.000    0.000    0.000    0.000 numbers.py:421(_eval_is_finite)
        1    0.000    0.000    0.000    0.000 power.py:345(_eval_is_negative)
        3    0.000    0.000    0.000    0.000 power.py:455(<genexpr>)
        1    0.000    0.000    0.000    0.000 _weakrefset.py:83(add)
        4    0.000    0.000    0.000    0.000 evalf.py:1234(<lambda>)
        1    0.000    0.000    0.000    0.000 numbers.py:2316(__neg__)
        1    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}
        1    0.000    0.000    0.000    0.000 power.py:245(_half)
       14    0.000    0.000    0.000    0.000 boolalg.py:242(__nonzero__)
        3    0.000    0.000    0.000    0.000 arrayprint.py:34(product)
        1    0.000    0.000    0.000    0.000 _weakrefset.py:16(__init__)
        1    0.000    0.000    0.000    0.000 _iotools.py:31(_is_string_like)
        1    0.000    0.000    0.000    0.000 {method '__subclasshook__' of 'object' objects}
        1    0.000    0.000    0.000    0.000 expr.py:787(_eval_power)
        1    0.000    0.000    0.000    0.000 numbers.py:2312(__abs__)
        1    0.000    0.000    0.000    0.000 {method '__subclasses__' of 'type' objects}
        2    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}
        2    0.000    0.000    0.000    0.000 basic.py:1629(doit)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


